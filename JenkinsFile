pipeline {
    agent any
    
    environment {
        SONARQUBE_SERVER = 'sonarqube'  // This is the SonarQube server configured in Jenkins
        SONARQUBE_SCANNER = 'sonarqube'  // The SonarQube Scanner name from Jenkins config
        DOCKER_IMAGE = "assignemtn_1"
        IMAGE_TAG = ""
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(branches: [[name: 'master']], extensions: [], userRemoteConfigs: [[credentialsId: 'githubtoken1', url: 'https://github.com/Mahadtkxel/python-project-blueprint.git']])
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                script {
                    // Run SonarQube analysis
                    withSonarQubeEnv(SONARQUBE_SERVER) {
                        // -Dsonar.projectName=Your Project \
                        sh """
                            echo ${BRANCH_NAME} \
                            sonar-scanner \
                            -Dsonar.projectKey=tkxel_assignment_1 \
                            -Dsonar.projectVersion=${BRANCH_NAME} \
                            -Dsonar.sources=. \
                            -Dsonar.branch.name=${BRANCH_NAME} \
                            -Dsonar.host.url=http://sonarqube:9000
                            -Dsonar.login=sqp_15c1edd1ed7d04f8c9aaee09c6a3528ba336de7e
                        """
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                // Wait for SonarQube to analyze the branch and check the quality gate status
                waitForQualityGate abortPipeline: true
            }
        }

        stage("Building docker image") {
            steps {
                script {
                    sh """
                        docker build -t ${DOCKER_IMAGE}:${imageTag} .
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo 'SonarQube analysis completed successfully.'
        }
        failure {
            echo 'SonarQube analysis failed.'
        }
    }
}
